{% extends "layout.html.j2" %}

{% block title %}Diagnostics - {{ config["mesh"]["name"] }}{% endblock %}

{% block content %}
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>System Diagnostics</h1>
            <p class="text-muted">Real-time system health and MQTT connection statistics</p>
        </div>
    </div>

    <!-- MQTT Status Card -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">MQTT Connection</h5>
                    <span id="mqtt-status-badge" class="badge badge-secondary">Loading...</span>
                </div>
                <div class="card-body">
                    <div id="mqtt-basic-stats">
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">Connection Status</div>
                                    <div id="mqtt-connection-status" class="metric-value">—</div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">Current Connection Duration</div>
                                    <div id="mqtt-current-duration" class="metric-value">—</div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">Uptime Percentage</div>
                                    <div id="mqtt-uptime-percent" class="metric-value">—</div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">Messages/Minute</div>
                                    <div id="mqtt-message-rate" class="metric-value">—</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- System Status Card -->
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">System Status</h5>
                </div>
                <div class="card-body">
                    <div id="system-stats">
                        <div class="row">
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">Memory Usage</div>
                                    <div id="system-memory" class="metric-value">—</div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">CPU Usage</div>
                                    <div id="system-cpu" class="metric-value">—</div>
                                </div>
                            </div>
                        </div>
                        <div class="row mt-3">
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">Database</div>
                                    <div id="system-database" class="metric-value">—</div>
                                </div>
                            </div>
                            <div class="col-sm-6">
                                <div class="metric">
                                    <div class="metric-label">System Uptime</div>
                                    <div id="system-uptime" class="metric-value">—</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Detailed MQTT Statistics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">MQTT Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Successful Connections</div>
                                <div id="mqtt-total-connections" class="metric-value">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Lost/Failed Connections</div>
                                <div id="mqtt-total-disconnections" class="metric-value">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Messages Received</div>
                                <div id="mqtt-messages-received" class="metric-value">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Success Rate</div>
                                <div id="mqtt-success-rate" class="metric-value">—</div>
                            </div>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Longest Connection</div>
                                <div id="mqtt-longest-connection" class="metric-value">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Messages Failed</div>
                                <div id="mqtt-messages-failed" class="metric-value">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Time Since Last Message</div>
                                <div id="mqtt-last-message" class="metric-value">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Health Score</div>
                                <div id="mqtt-health-score" class="metric-value">—</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Message Type Statistics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-info text-white">
                    <h5 class="mb-0">📊 Message Type Statistics (Top 10)</h5>
                </div>
                <div class="card-body">
                    <div id="message-types-table">
                        <p class="text-muted">Loading...</p>
                    </div>
                    <div class="mt-3">
                        <small class="text-muted">Total unique message types: <span id="message-type-count">—</span></small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- ATAK Flood Statistics -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">📊 Message Processing Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Raw Messages Received</div>
                                <div id="raw-messages-count" class="metric-value text-info">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Dropped Messages</div>
                                <div id="dropped-messages-count" class="metric-value text-danger">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Drop Rate</div>
                                <div id="drop-rate-percentage" class="metric-value text-warning">—</div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="metric">
                                <div class="metric-label">Current Min ATAK</div>
                                <div id="atak-current-minute" class="metric-value text-warning">—</div>
                            </div>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-6">
                            <div class="metric">
                                <div class="metric-label">Total ATAK Messages Since Start</div>
                                <div id="atak-total-count" class="metric-value">—</div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="metric">
                                <div class="metric-label">Processing Status</div>
                                <div id="atak-flood-status" class="metric-value">—</div>
                            </div>
                        </div>
                    </div>

                    <div id="atak-flood-history" style="display: none;">
                        <h6>Recent ATAK Flood Events (Last 24 Hours)</h6>
                        <div id="atak-history-table">
                            <p class="text-muted">Loading...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Flood Detection -->
    <div class="row mb-4" id="flood-detection-row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0">🚨 Flood Detection</h5>
                </div>
                <div class="card-body">
                    <div id="flood-alert" class="alert alert-success" role="alert">
                        ✅ Checking for problem nodes...
                    </div>
                    <div id="problem-nodes-table" style="display: none;">
                        <h6>Problem Nodes</h6>
                        <div id="problem-nodes-content">
                            <p class="text-muted">Loading...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Disconnections -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Recent Disconnections</h5>
                </div>
                <div class="card-body">
                    <div id="recent-disconnections">
                        <p class="text-muted">Loading...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Health Issues -->
    <div class="row mb-4" id="health-issues-row" style="display: none;">
        <div class="col-12">
            <div class="card border-warning">
                <div class="card-header bg-warning text-dark">
                    <h5 class="mb-0">⚠️ Health Issues</h5>
                </div>
                <div class="card-body">
                    <ul id="health-issues-list" class="mb-0">
                    </ul>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <p class="text-muted small">
                Last updated: <span id="last-updated">—</span> |
                Auto-refresh: <span id="auto-refresh-status">Enabled</span>
            </p>
        </div>
    </div>
</div>

<style>
.metric {
    text-align: center;
    padding: 1rem 0;
}

.metric-label {
    font-size: 0.875rem;
    color: #6c757d;
    margin-bottom: 0.5rem;
}

.metric-value {
    font-size: 1.5rem;
    font-weight: 600;
    color: #495057;
}

.status-connected { color: #28a745; }
.status-disconnected { color: #dc3545; }
.status-warning { color: #ffc107; }

.badge-healthy { background-color: #28a745; }
.badge-warning { background-color: #ffc107; color: #212529; }
.badge-critical { background-color: #dc3545; }
</style>

<script>
let autoRefresh = true;
let refreshInterval;

function formatDuration(seconds) {
    if (!seconds || seconds < 0) return '—';

    const days = Math.floor(seconds / 86400);
    const hours = Math.floor((seconds % 86400) / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = Math.floor(seconds % 60);

    if (days > 0) {
        return `${days}d ${hours}h ${minutes}m`;
    } else if (hours > 0) {
        return `${hours}h ${minutes}m ${secs}s`;
    } else if (minutes > 0) {
        return `${minutes}m ${secs}s`;
    } else {
        return `${secs}s`;
    }
}

function formatDateTime(timestamp) {
    if (!timestamp) return '—';
    return new Date(timestamp * 1000).toLocaleString();
}

function updateDiagnostics() {
    fetch('/api/diagnostics')
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Diagnostics error:', data.error);
                return;
            }

            const mqtt = data.mqtt.statistics;
            const health = data.mqtt.health;
            const system = data.system;
            const database = data.database;

            // Update MQTT status badge
            const statusBadge = document.getElementById('mqtt-status-badge');
            if (health.status === 'healthy') {
                statusBadge.className = 'badge badge-success';
                statusBadge.textContent = 'Healthy';
            } else if (health.status === 'warning') {
                statusBadge.className = 'badge badge-warning';
                statusBadge.textContent = 'Warning';
            } else {
                statusBadge.className = 'badge badge-danger';
                statusBadge.textContent = 'Critical';
            }

            // Update basic MQTT stats
            document.getElementById('mqtt-connection-status').textContent =
                mqtt.connection_status ? 'Connected' : 'Disconnected';
            document.getElementById('mqtt-connection-status').className =
                mqtt.connection_status ? 'metric-value status-connected' : 'metric-value status-disconnected';

            document.getElementById('mqtt-current-duration').textContent =
                formatDuration(mqtt.current_connection_duration);
            document.getElementById('mqtt-uptime-percent').textContent =
                mqtt.uptime_percentage.toFixed(1) + '%';
            document.getElementById('mqtt-message-rate').textContent =
                mqtt.avg_message_rate_per_minute.toFixed(1);

            // Update detailed MQTT stats
            document.getElementById('mqtt-total-connections').textContent = mqtt.total_connections;
            document.getElementById('mqtt-total-disconnections').textContent = mqtt.total_disconnections;
            document.getElementById('mqtt-messages-received').textContent = mqtt.messages_received.toLocaleString();
            document.getElementById('mqtt-success-rate').textContent = mqtt.message_success_rate.toFixed(1) + '%';
            document.getElementById('mqtt-longest-connection').textContent = formatDuration(mqtt.longest_connection_duration);
            document.getElementById('mqtt-messages-failed').textContent = mqtt.messages_failed;
            document.getElementById('mqtt-last-message').textContent =
                mqtt.time_since_last_message ? formatDuration(mqtt.time_since_last_message) + ' ago' : 'Never';
            document.getElementById('mqtt-health-score').textContent = health.health_score + '/100';

            // Update system stats
            document.getElementById('system-memory').textContent = system.memory_usage_mb.toFixed(1) + ' MB';
            document.getElementById('system-cpu').textContent = system.cpu_percent.toFixed(1) + '%';
            document.getElementById('system-database').textContent = database.connected ? 'Connected' : 'Disconnected';
            document.getElementById('system-database').className =
                database.connected ? 'metric-value status-connected' : 'metric-value status-disconnected';
            document.getElementById('system-uptime').textContent = formatDuration(system.uptime_seconds);

            // Update ATAK flood statistics
            const atakFlood = data.atak_flood || {};

            // Update raw and dropped message counts
            const rawCount = mqtt.raw_messages_received || 0;
            const droppedCount = mqtt.dropped_messages_total || 0;
            document.getElementById('raw-messages-count').textContent = rawCount.toLocaleString();
            document.getElementById('dropped-messages-count').textContent = droppedCount.toLocaleString();

            // Calculate drop rate percentage
            const dropRate = rawCount > 0 ? (droppedCount / rawCount * 100) : 0;
            document.getElementById('drop-rate-percentage').textContent = dropRate.toFixed(1) + '%';

            // Update ATAK counts
            document.getElementById('atak-current-minute').textContent = atakFlood.current_minute_count || 0;
            document.getElementById('atak-total-count').textContent = (atakFlood.total_count || 0).toLocaleString();

            // Determine flood status
            const currentMinuteCount = atakFlood.current_minute_count || 0;
            const floodStatusElement = document.getElementById('atak-flood-status');
            if (currentMinuteCount > 1000) {
                floodStatusElement.textContent = 'SEVERE FLOOD';
                floodStatusElement.className = 'metric-value text-danger';
            } else if (currentMinuteCount > 100) {
                floodStatusElement.textContent = 'FLOOD DETECTED';
                floodStatusElement.className = 'metric-value text-warning';
            } else if (currentMinuteCount > 0) {
                floodStatusElement.textContent = 'Low Activity';
                floodStatusElement.className = 'metric-value text-info';
            } else {
                floodStatusElement.textContent = 'No ATAK Messages';
                floodStatusElement.className = 'metric-value text-success';
            }

            // Update ATAK flood history table and show/hide the section
            const atakHistorySection = document.getElementById('atak-flood-history');
            const atakHistoryDiv = document.getElementById('atak-history-table');

            if (atakFlood.history && atakFlood.history.length > 0) {
                // Show the section since we have flood events
                atakHistorySection.style.display = 'block';

                let html = '<div class="table-responsive"><table class="table table-sm table-striped">';
                html += '<thead class="thead-light"><tr>';
                html += '<th>Time Period</th>';
                html += '<th class="text-right">ATAK Count</th>';
                html += '<th class="text-right">Total Messages</th>';
                html += '<th class="text-right">Flood %</th>';
                html += '<th>Severity</th>';
                html += '</tr></thead><tbody>';

                atakFlood.history.slice(0, 10).forEach(event => {
                    const percentage = parseFloat(event.flood_percentage);
                    // Since we only store floods with 1000+ ATAK messages, all are significant
                    const severityClass = percentage > 50 ? 'table-danger' : percentage > 20 ? 'table-warning' : 'table-info';
                    const severityText = percentage > 50 ? 'SEVERE' : percentage > 20 ? 'HIGH' : 'SIGNIFICANT';

                    html += `<tr class="${severityClass}">
                        <td>${new Date(event.minute_period).toLocaleString()}</td>
                        <td class="text-right font-weight-bold">${event.atak_message_count.toLocaleString()}</td>
                        <td class="text-right">${event.total_message_count.toLocaleString()}</td>
                        <td class="text-right">${percentage.toFixed(1)}%</td>
                        <td><span class="badge badge-danger">${severityText}</span></td>
                    </tr>`;
                });

                html += '</tbody></table></div>';
                atakHistoryDiv.innerHTML = html;
            } else {
                // Hide the section since there are no flood events
                atakHistorySection.style.display = 'none';
                atakHistoryDiv.innerHTML = '<p class="text-muted">No ATAK flood events in the last 24 hours</p>';
            }

            // Update message type statistics
            const messageTypesDiv = document.getElementById('message-types-table');
            if (mqtt.top_message_types && mqtt.top_message_types.length > 0) {
                let html = '<div class="table-responsive"><table class="table table-sm table-hover">';
                html += '<thead class="thead-light"><tr>';
                html += '<th>Type</th>';
                html += '<th class="text-right">Count</th>';
                html += '<th class="text-right">Percentage</th>';
                html += '<th class="text-right">Rate/Min</th>';
                html += '<th>Visual</th>';
                html += '</tr></thead><tbody>';

                mqtt.top_message_types.forEach((msgType, index) => {
                    const isATAK = msgType.name.includes('ATAK');
                    const rowClass = isATAK ? 'table-warning' : '';
                    const icon = isATAK ? '⚠️' : '';

                    html += `<tr class="${rowClass}">
                        <td>${icon} ${msgType.name}</td>
                        <td class="text-right">${msgType.count.toLocaleString()}</td>
                        <td class="text-right">${msgType.percentage.toFixed(1)}%</td>
                        <td class="text-right">${msgType.rate_per_minute.toFixed(0)}/min</td>
                        <td>
                            <div class="progress" style="height: 20px;">
                                <div class="progress-bar ${isATAK ? 'bg-warning' : 'bg-primary'}"
                                     role="progressbar"
                                     style="width: ${msgType.percentage}%"
                                     aria-valuenow="${msgType.percentage}"
                                     aria-valuemin="0"
                                     aria-valuemax="100">
                                </div>
                            </div>
                        </td>
                    </tr>`;
                });

                html += '</tbody></table></div>';

                // Add warning if ATAK is dominating
                const atakTypes = mqtt.top_message_types.filter(t => t.name.includes('ATAK'));
                if (atakTypes.length > 0) {
                    const totalAtakPercentage = atakTypes.reduce((sum, t) => sum + t.percentage, 0);
                    if (totalAtakPercentage > 50) {
                        html += `<div class="alert alert-warning mt-3" role="alert">
                            <strong>⚠️ ATAK Flood Detected!</strong>
                            ATAK messages are consuming ${totalAtakPercentage.toFixed(1)}% of all traffic.
                            This may be impacting system performance.
                        </div>`;
                    }
                }

                messageTypesDiv.innerHTML = html;
            } else {
                messageTypesDiv.innerHTML = '<p class="text-muted">No message type data available yet</p>';
            }

            // Update message type count
            document.getElementById('message-type-count').textContent = mqtt.message_type_count || 0;

            // Update recent disconnections
            const disconnectionsDiv = document.getElementById('recent-disconnections');
            if (mqtt.recent_disconnects && mqtt.recent_disconnects.length > 0) {
                let html = '<div class="table-responsive"><table class="table table-sm"><thead><tr><th>Time</th><th>Reason</th><th>Duration</th></tr></thead><tbody>';

                mqtt.recent_disconnects.slice(-5).reverse().forEach(disconnect => {
                    html += `<tr>
                        <td>${formatDateTime(disconnect.timestamp)}</td>
                        <td>${disconnect.reason || 'Unknown'}</td>
                        <td>${formatDuration(disconnect.duration)}</td>
                    </tr>`;
                });

                html += '</tbody></table></div>';
                disconnectionsDiv.innerHTML = html;
            } else {
                disconnectionsDiv.innerHTML = '<p class="text-muted">No recent disconnections</p>';
            }

            // Update health issues
            const issuesRow = document.getElementById('health-issues-row');
            const issuesList = document.getElementById('health-issues-list');

            if (health.issues && health.issues.length > 0) {
                issuesRow.style.display = 'block';
                issuesList.innerHTML = health.issues.map(issue => `<li>${issue}</li>`).join('');
            } else {
                issuesRow.style.display = 'none';
            }

            // Update timestamp
            document.getElementById('last-updated').textContent = formatDateTime(data.timestamp);

        })
        .catch(error => {
            console.error('Error fetching diagnostics:', error);
        });
}

function updateFloodDetection() {
    fetch('/api/flood-status')
        .then(response => response.json())
        .then(data => {
            if (data.error) {
                console.error('Flood detection error:', data.error);
                return;
            }

            const floodAlert = document.getElementById('flood-alert');
            const problemNodesTable = document.getElementById('problem-nodes-table');
            const problemNodesContent = document.getElementById('problem-nodes-content');

            if (data.is_flooding && data.problem_nodes.length > 0) {
                // Update alert to show problem nodes
                const emoji = {
                    'ATAK FLOODING': '🔴',
                    'PARSE ERRORS': '⚠️',
                    'UNKNOWN TYPES': '🟠',
                    'CHANNEL ISSUES': '🟡',
                    'PROCESSING ERRORS': '💥',
                    'HIGH VOLUME': '🌊'
                };

                const alerts = data.problem_nodes.slice(0, 3).map(node => {
                    return `${emoji[node.primary_issue] || '❓'} ${node.node_id} (${node.name}) - ${node.primary_issue}`;
                });

                let alertText = '🚨 Problem Nodes Detected: ' + alerts.join(', ');
                if (data.problem_nodes.length > 3) {
                    alertText += ` +${data.problem_nodes.length - 3} more`;
                }

                floodAlert.className = 'alert alert-danger';
                floodAlert.innerHTML = alertText;

                // Show detailed table
                problemNodesTable.style.display = 'block';

                // Build problem nodes table
                let html = '<div class="table-responsive"><table class="table table-sm table-striped">';
                html += '<thead class="thead-light"><tr>';
                html += '<th>Node ID</th>';
                html += '<th>Name</th>';
                html += '<th>Primary Issue</th>';
                html += '<th class="text-right">Total Problems</th>';
                html += '<th class="text-right">ATAK Drops</th>';
                html += '<th class="text-right">Parse Errors</th>';
                html += '<th class="text-right">Other Issues</th>';
                html += '<th>Last Seen</th>';
                html += '</tr></thead><tbody>';

                data.problem_nodes.forEach(node => {
                    const problems = node.problems;
                    const otherIssues = problems.unsupported_types + problems.ignored_channels + problems.processing_errors;
                    const lastSeen = formatDateTime(node.last_seen);

                    // Color code rows by primary issue
                    let rowClass = '';
                    if (node.primary_issue === 'ATAK FLOODING') rowClass = 'table-danger';
                    else if (node.primary_issue === 'PARSE ERRORS') rowClass = 'table-warning';
                    else if (node.primary_issue === 'HIGH VOLUME') rowClass = 'table-info';

                    html += `<tr class="${rowClass}">
                        <td><code>${node.node_id}</code></td>
                        <td>${node.name}</td>
                        <td>${emoji[node.primary_issue] || '❓'} ${node.primary_issue}</td>
                        <td class="text-right"><strong>${node.total_problem_count.toLocaleString()}</strong></td>
                        <td class="text-right">${problems.atak_drops.toLocaleString()}</td>
                        <td class="text-right">${problems.parse_failures.toLocaleString()}</td>
                        <td class="text-right">${otherIssues.toLocaleString()}</td>
                        <td>${lastSeen}</td>
                    </tr>`;
                });

                html += '</tbody></table></div>';

                // Add summary
                html += `<div class="mt-3">
                    <small class="text-muted">
                        Total problem nodes: ${data.total_problem_nodes} |
                        Showing top ${Math.min(data.problem_nodes.length, 10)} nodes
                    </small>
                </div>`;

                problemNodesContent.innerHTML = html;
            } else {
                // No problems detected
                floodAlert.className = 'alert alert-success';
                floodAlert.innerHTML = '✅ No Problem Nodes Detected';
                problemNodesTable.style.display = 'none';
            }

        })
        .catch(error => {
            console.error('Error fetching flood detection:', error);
        });
}

function startAutoRefresh() {
    if (refreshInterval) clearInterval(refreshInterval);
    refreshInterval = setInterval(() => {
        updateDiagnostics();
        updateFloodDetection();
    }, 5000); // Update every 5 seconds
    document.getElementById('auto-refresh-status').textContent = 'Enabled';
}

function stopAutoRefresh() {
    if (refreshInterval) {
        clearInterval(refreshInterval);
        refreshInterval = null;
    }
    document.getElementById('auto-refresh-status').textContent = 'Disabled';
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    updateDiagnostics();
    updateFloodDetection();
    startAutoRefresh();
});

// Stop auto-refresh when page becomes hidden
document.addEventListener('visibilitychange', function() {
    if (document.hidden) {
        stopAutoRefresh();
    } else {
        startAutoRefresh();
    }
});
</script>
{% endblock %}
